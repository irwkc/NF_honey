import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useData } from '../context/DataContext';
import { UserRole, Product } from '../types';
import { 
  Package, 
  Plus, 
  Edit, 
  Trash2, 
  Eye,
  EyeOff,
  Save,
  X
} from 'lucide-react';

const ProductsPage: React.FC = () => {
  const { user, hasRole } = useAuth();
  const { 
    products, 
    addProduct, 
    updateProduct 
  } = useData();
  
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [editingProduct, setEditingProduct] = useState<Product | null>(null);
  const [editForm, setEditForm] = useState<{
    name: string;
    type: 'honey' | 'jam';
    category: string;
    description: string;
    basePrice: number;
    unit: 'kg' | 'g' | 'l' | 'ml';
    minWeight: number;
    maxWeight: number;
    isActive: boolean;
  }>({
    name: '',
    type: 'honey',
    category: '',
    description: '',
    basePrice: 0,
    unit: 'kg',
    minWeight: 0.1,
    maxWeight: 5,
    isActive: true,
  });
  const [newProduct, setNewProduct] = useState<{
    name: string;
    type: 'honey' | 'jam';
    category: string;
    description: string;
    basePrice: number;
    unit: 'kg' | 'g' | 'l' | 'ml';
    minWeight: number;
    maxWeight: number;
    isActive: boolean;
  }>({
    name: '',
    type: 'honey',
    category: '',
    description: '',
    basePrice: 0,
    unit: 'kg',
    minWeight: 0.1,
    maxWeight: 5,
    isActive: true,
  });

  // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏
  if (!hasRole(UserRole.ADMIN)) {
    return (
      <div className="card">
        <h1 className="text-xl font-semibold mb-4">–¢–æ–≤–∞—Ä—ã</h1>
        <p className="text-gray-600">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</p>
      </div>
    );
  }

  const createProduct = () => {
    if (!newProduct.name || !newProduct.category || newProduct.basePrice <= 0) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    addProduct(newProduct);
    setShowCreateForm(false);
    setNewProduct({
      name: '',
      type: 'honey',
      category: '',
      description: '',
      basePrice: 0,
      unit: 'kg',
      minWeight: 0.1,
      maxWeight: 5,
      isActive: true,
    });
    alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
  };

  const updateProductStatus = (productId: string, isActive: boolean) => {
    updateProduct(productId, { isActive });
  };

  const deleteProduct = (productId: string) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –≤—ã–∑–æ–≤
      alert('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω');
    }
  };

  const openEditForm = (product: Product) => {
    setEditingProduct(product);
    setEditForm({
      name: product.name,
      type: product.type,
      category: product.category,
      description: product.description || '',
      basePrice: product.basePrice,
      unit: product.unit,
      minWeight: product.minWeight,
      maxWeight: product.maxWeight,
      isActive: product.isActive,
    });
  };

  const saveEdit = () => {
    if (!editingProduct) return;
    
    if (!editForm.name || !editForm.category || editForm.basePrice <= 0) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    updateProduct(editingProduct.id, editForm);
    setEditingProduct(null);
    alert('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
  };

  const getTypeIcon = (type: string) => {
    return type === 'honey' ? 'üçØ' : 'ü•´';
  };

  const getTypeText = (type: string) => {
    return type === 'honey' ? '–ú–µ–¥' : '–í–∞—Ä–µ–Ω—å–µ';
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="card bg-gradient-to-r from-honey-500 to-honey-600 text-white">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-xl font-semibold mb-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</h1>
            <p className="text-honey-100">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤</p>
          </div>
          <button
            onClick={() => setShowCreateForm(true)}
            className="btn-secondary"
          >
            <Plus className="w-4 h-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
          </button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-3 gap-4">
        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</p>
              <p className="text-2xl font-bold text-gray-900">{products.length}</p>
            </div>
            <Package className="w-8 h-8 text-blue-500" />
          </div>
        </div>
        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">–ú–µ–¥</p>
              <p className="text-2xl font-bold text-yellow-600">
                {products.filter(p => p.type === 'honey').length}
              </p>
            </div>
            <span className="text-2xl">üçØ</span>
          </div>
        </div>
        <div className="card">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">–í–∞—Ä–µ–Ω—å–µ</p>
              <p className="text-2xl font-bold text-red-600">
                {products.filter(p => p.type === 'jam').length}
              </p>
            </div>
            <span className="text-2xl">ü•´</span>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="space-y-4">
        {products.length === 0 ? (
          <div className="card text-center py-8">
            <Package className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
            <button
              onClick={() => setShowCreateForm(true)}
              className="btn-primary mt-4"
            >
              –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
            </button>
          </div>
        ) : (
          products.map(product => (
            <div key={product.id} className="card">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center">
                  <span className="text-2xl mr-3">{getTypeIcon(product.type)}</span>
                  <div>
                    <h3 className="font-semibold">{product.name}</h3>
                    <p className="text-sm text-gray-600">
                      {getTypeText(product.type)} ‚Ä¢ {product.category}
                    </p>
                  </div>
                </div>
                <div className="flex items-center space-x-2">
                  {product.isActive ? (
                    <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full flex items-center">
                      <Eye className="w-3 h-3 mr-1" />
                      –ê–∫—Ç–∏–≤–µ–Ω
                    </span>
                  ) : (
                    <span className="px-2 py-1 bg-gray-100 text-gray-800 text-xs rounded-full flex items-center">
                      <EyeOff className="w-3 h-3 mr-1" />
                      –ù–µ–∞–∫—Ç–∏–≤–µ–Ω
                    </span>
                  )}
                </div>
              </div>
              
              <p className="text-sm text-gray-600 mb-4">{product.description}</p>
              
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <p className="text-sm text-gray-600">–¶–µ–Ω–∞</p>
                  <p className="font-semibold">{product.basePrice} ‚ÇΩ/{product.unit}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-600">–í–µ—Å</p>
                  <p className="font-semibold">
                    {product.minWeight}-{product.maxWeight} {product.unit}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                <div className="text-sm text-gray-600">
                  ID: {product.id}
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => updateProductStatus(product.id, !product.isActive)}
                    className={`px-3 py-1 rounded text-sm ${
                      product.isActive 
                        ? 'bg-gray-100 text-gray-700 hover:bg-gray-200' 
                        : 'bg-green-100 text-green-700 hover:bg-green-200'
                    }`}
                  >
                    {product.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                  </button>
                  <button
                    onClick={() => openEditForm(product)}
                    className="text-blue-600 hover:text-blue-800"
                  >
                    <Edit className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => deleteProduct(product.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 className="w-4 h-4" />
                  </button>
                </div>
              </div>
            </div>
          ))
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      {showCreateForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *
                </label>
                <input
                  type="text"
                  value={newProduct.name}
                  onChange={(e) => setNewProduct(prev => ({ ...prev, name: e.target.value }))}
                  className="input-field"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥ –ª–∏–ø–æ–≤—ã–π"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–∏–ø —Ç–æ–≤–∞—Ä–∞
                  </label>
                  <select
                    value={newProduct.type}
                    onChange={(e) => setNewProduct(prev => ({ 
                      ...prev, 
                      type: e.target.value as 'honey' | 'jam' 
                    }))}
                    className="input-field"
                  >
                    <option value="honey">–ú–µ–¥</option>
                    <option value="jam">–í–∞—Ä–µ–Ω—å–µ</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                  </label>
                  <input
                    type="text"
                    value={newProduct.category}
                    onChange={(e) => setNewProduct(prev => ({ ...prev, category: e.target.value }))}
                    className="input-field"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¶–≤–µ—Ç–æ—á–Ω—ã–π –º–µ–¥"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={newProduct.description}
                  onChange={(e) => setNewProduct(prev => ({ ...prev, description: e.target.value }))}
                  className="input-field"
                  rows={3}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                />
              </div>
              
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¶–µ–Ω–∞ (‚ÇΩ) *
                  </label>
                  <input
                    type="number"
                    value={newProduct.basePrice}
                    onChange={(e) => setNewProduct(prev => ({ ...prev, basePrice: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.01"
                    placeholder="0"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                  </label>
                  <select
                    value={newProduct.unit}
                    onChange={(e) => setNewProduct(prev => ({ 
                      ...prev, 
                      unit: e.target.value as 'kg' | 'g' | 'l' | 'ml' 
                    }))}
                    className="input-field"
                  >
                    <option value="kg">–∫–≥</option>
                    <option value="g">–≥</option>
                    <option value="l">–ª</option>
                    <option value="ml">–º–ª</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={newProduct.isActive ? 'active' : 'inactive'}
                    onChange={(e) => setNewProduct(prev => ({ ...prev, isActive: e.target.value === 'active' }))}
                    className="input-field"
                  >
                    <option value="active">–ê–∫—Ç–∏–≤–µ–Ω</option>
                    <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                  </select>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ú–∏–Ω. –≤–µ—Å ({newProduct.unit})
                  </label>
                  <input
                    type="number"
                    value={newProduct.minWeight}
                    onChange={(e) => setNewProduct(prev => ({ ...prev, minWeight: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.1"
                    placeholder="0.1"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ú–∞–∫—Å. –≤–µ—Å ({newProduct.unit})
                  </label>
                  <input
                    type="number"
                    value={newProduct.maxWeight}
                    onChange={(e) => setNewProduct(prev => ({ ...prev, maxWeight: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.1"
                    placeholder="5"
                  />
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setShowCreateForm(false)}
                className="flex-1 btn-secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={createProduct}
                disabled={!newProduct.name || !newProduct.category || newProduct.basePrice <= 0}
                className="flex-1 btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Save className="w-4 h-4 mr-2 inline" />
                –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ */}
      {editingProduct && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
            <h3 className="text-lg font-semibold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *
                </label>
                <input
                  type="text"
                  value={editForm.name}
                  onChange={(e) => setEditForm(prev => ({ ...prev, name: e.target.value }))}
                  className="input-field"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–µ–¥ –ª–∏–ø–æ–≤—ã–π"
                />
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–∏–ø —Ç–æ–≤–∞—Ä–∞
                  </label>
                  <select
                    value={editForm.type}
                    onChange={(e) => setEditForm(prev => ({ 
                      ...prev, 
                      type: e.target.value as 'honey' | 'jam' 
                    }))}
                    className="input-field"
                  >
                    <option value="honey">–ú–µ–¥</option>
                    <option value="jam">–í–∞—Ä–µ–Ω—å–µ</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
                  </label>
                  <input
                    type="text"
                    value={editForm.category}
                    onChange={(e) => setEditForm(prev => ({ ...prev, category: e.target.value }))}
                    className="input-field"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¶–≤–µ—Ç–æ—á–Ω—ã–π –º–µ–¥"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –û–ø–∏—Å–∞–Ω–∏–µ
                </label>
                <textarea
                  value={editForm.description}
                  onChange={(e) => setEditForm(prev => ({ ...prev, description: e.target.value }))}
                  className="input-field"
                  rows={3}
                  placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                />
              </div>
              
              <div className="grid grid-cols-3 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –¶–µ–Ω–∞ (‚ÇΩ) *
                  </label>
                  <input
                    type="number"
                    value={editForm.basePrice}
                    onChange={(e) => setEditForm(prev => ({ ...prev, basePrice: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.01"
                    placeholder="0"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                  </label>
                  <select
                    value={editForm.unit}
                    onChange={(e) => setEditForm(prev => ({ 
                      ...prev, 
                      unit: e.target.value as 'kg' | 'g' | 'l' | 'ml' 
                    }))}
                    className="input-field"
                  >
                    <option value="kg">–∫–≥</option>
                    <option value="g">–≥</option>
                    <option value="l">–ª</option>
                    <option value="ml">–º–ª</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={editForm.isActive ? 'active' : 'inactive'}
                    onChange={(e) => setEditForm(prev => ({ ...prev, isActive: e.target.value === 'active' }))}
                    className="input-field"
                  >
                    <option value="active">–ê–∫—Ç–∏–≤–µ–Ω</option>
                    <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–µ–Ω</option>
                  </select>
                </div>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ú–∏–Ω. –≤–µ—Å ({editForm.unit})
                  </label>
                  <input
                    type="number"
                    value={editForm.minWeight}
                    onChange={(e) => setEditForm(prev => ({ ...prev, minWeight: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.1"
                    placeholder="0.1"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ú–∞–∫—Å. –≤–µ—Å ({editForm.unit})
                  </label>
                  <input
                    type="number"
                    value={editForm.maxWeight}
                    onChange={(e) => setEditForm(prev => ({ ...prev, maxWeight: parseFloat(e.target.value) || 0 }))}
                    className="input-field"
                    min="0"
                    step="0.1"
                    placeholder="5"
                  />
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3 mt-6">
              <button
                onClick={() => setEditingProduct(null)}
                className="flex-1 btn-secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={saveEdit}
                disabled={!editForm.name || !editForm.category || editForm.basePrice <= 0}
                className="flex-1 btn-primary disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Save className="w-4 h-4 mr-2 inline" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProductsPage;
