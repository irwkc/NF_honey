{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaognev/Desktop/honey/src/context/DataContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext(undefined);\n\n// Начальные данные (пустые массивы для реальной работы)\nconst initialProducts = [];\nconst initialLocations = [{\n  id: 'loc1',\n  name: 'Точка \"Центр\"',\n  address: 'ул. Ленина, 15',\n  managerId: 'admin1',\n  isActive: true\n}];\nconst initialInventory = [];\nconst initialSuppliers = [];\nconst initialPromotions = [];\n// Функции для работы с localStorage\nconst loadFromStorage = (key, defaultValue) => {\n  try {\n    const stored = localStorage.getItem(key);\n    return stored ? JSON.parse(stored) : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n};\nconst saveToStorage = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }\n};\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState(() => loadFromStorage('honeyProducts', initialProducts));\n  const [locations, setLocations] = useState(() => loadFromStorage('honeyLocations', initialLocations));\n  const [inventory, setInventory] = useState(() => loadFromStorage('honeyInventory', initialInventory));\n  const [sales, setSales] = useState(() => loadFromStorage('honeySales', []));\n  const [purchaseOrders, setPurchaseOrders] = useState(() => loadFromStorage('honeyPurchaseOrders', []));\n  const [promotions, setPromotions] = useState(() => loadFromStorage('honeyPromotions', initialPromotions));\n  const [suppliers, setSuppliers] = useState(() => loadFromStorage('honeySuppliers', initialSuppliers));\n  const addProduct = product => {\n    const newProduct = {\n      ...product,\n      id: `prod${Date.now()}`\n    };\n    const updatedProducts = [...products, newProduct];\n    setProducts(updatedProducts);\n    saveToStorage('honeyProducts', updatedProducts);\n  };\n  const updateProduct = (id, product) => {\n    const updatedProducts = products.map(p => p.id === id ? {\n      ...p,\n      ...product\n    } : p);\n    setProducts(updatedProducts);\n    saveToStorage('honeyProducts', updatedProducts);\n  };\n  const addLocation = location => {\n    const newLocation = {\n      ...location,\n      id: `loc${Date.now()}`\n    };\n    const updatedLocations = [...locations, newLocation];\n    setLocations(updatedLocations);\n    saveToStorage('honeyLocations', updatedLocations);\n  };\n  const updateInventory = (locationId, productId, quantity) => {\n    const updatedInventory = inventory.map(inv => inv.locationId === locationId && inv.productId === productId ? {\n      ...inv,\n      currentStock: quantity,\n      lastUpdated: new Date()\n    } : inv);\n    setInventory(updatedInventory);\n    saveToStorage('honeyInventory', updatedInventory);\n  };\n  const getLowStockItems = () => {\n    return inventory.filter(inv => inv.currentStock <= inv.minStock);\n  };\n  const addSale = sale => {\n    const newSale = {\n      ...sale,\n      id: `sale${Date.now()}`\n    };\n    const updatedSales = [...sales, newSale];\n    setSales(updatedSales);\n    saveToStorage('honeySales', updatedSales);\n\n    // Обновляем остатки\n    sale.items.forEach(item => {\n      const currentInv = inventory.find(inv => inv.locationId === sale.locationId && inv.productId === item.productId);\n      if (currentInv) {\n        updateInventory(sale.locationId, item.productId, currentInv.currentStock - item.quantity);\n      }\n    });\n  };\n  const addPurchaseOrder = order => {\n    const newOrder = {\n      ...order,\n      id: `order${Date.now()}`\n    };\n    const updatedOrders = [...purchaseOrders, newOrder];\n    setPurchaseOrders(updatedOrders);\n    saveToStorage('honeyPurchaseOrders', updatedOrders);\n  };\n  const updatePurchaseOrder = (id, order) => {\n    const updatedOrders = purchaseOrders.map(o => o.id === id ? {\n      ...o,\n      ...order\n    } : o);\n    setPurchaseOrders(updatedOrders);\n    saveToStorage('honeyPurchaseOrders', updatedOrders);\n  };\n  const addPromotion = promotion => {\n    const newPromotion = {\n      ...promotion,\n      id: `promo${Date.now()}`\n    };\n    const updatedPromotions = [...promotions, newPromotion];\n    setPromotions(updatedPromotions);\n    saveToStorage('honeyPromotions', updatedPromotions);\n  };\n  const addSupplier = supplier => {\n    const newSupplier = {\n      ...supplier,\n      id: `sup${Date.now()}`\n    };\n    const updatedSuppliers = [...suppliers, newSupplier];\n    setSuppliers(updatedSuppliers);\n    saveToStorage('honeySuppliers', updatedSuppliers);\n  };\n  const value = {\n    products,\n    addProduct,\n    updateProduct,\n    locations,\n    addLocation,\n    inventory,\n    updateInventory,\n    getLowStockItems,\n    sales,\n    addSale,\n    purchaseOrders,\n    addPurchaseOrder,\n    updatePurchaseOrder,\n    promotions,\n    addPromotion,\n    suppliers,\n    addSupplier\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"cJFYdSKg+QvOVVrukn3ImofOYBc=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData должен использоваться внутри DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","DataContext","undefined","initialProducts","initialLocations","id","name","address","managerId","isActive","initialInventory","initialSuppliers","initialPromotions","loadFromStorage","key","defaultValue","stored","localStorage","getItem","JSON","parse","saveToStorage","value","setItem","stringify","error","console","DataProvider","children","_s","products","setProducts","locations","setLocations","inventory","setInventory","sales","setSales","purchaseOrders","setPurchaseOrders","promotions","setPromotions","suppliers","setSuppliers","addProduct","product","newProduct","Date","now","updatedProducts","updateProduct","map","p","addLocation","location","newLocation","updatedLocations","updateInventory","locationId","productId","quantity","updatedInventory","inv","currentStock","lastUpdated","getLowStockItems","filter","minStock","addSale","sale","newSale","updatedSales","items","forEach","item","currentInv","find","addPurchaseOrder","order","newOrder","updatedOrders","updatePurchaseOrder","o","addPromotion","promotion","newPromotion","updatedPromotions","addSupplier","supplier","newSupplier","updatedSuppliers","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/Users/nikitaognev/Desktop/honey/src/context/DataContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Product, Location, Inventory, Sale, PurchaseOrder, Promotion, Supplier } from '../types';\n\ninterface DataContextType {\n  // Товары\n  products: Product[];\n  addProduct: (product: Omit<Product, 'id'>) => void;\n  updateProduct: (id: string, product: Partial<Product>) => void;\n  \n  // Локации\n  locations: Location[];\n  addLocation: (location: Omit<Location, 'id'>) => void;\n  \n  // Остатки\n  inventory: Inventory[];\n  updateInventory: (locationId: string, productId: string, quantity: number) => void;\n  getLowStockItems: () => Inventory[];\n  \n  // Продажи\n  sales: Sale[];\n  addSale: (sale: Omit<Sale, 'id'>) => void;\n  \n  // Заказы поставщикам\n  purchaseOrders: PurchaseOrder[];\n  addPurchaseOrder: (order: Omit<PurchaseOrder, 'id'>) => void;\n  updatePurchaseOrder: (id: string, order: Partial<PurchaseOrder>) => void;\n  \n  // Акции\n  promotions: Promotion[];\n  addPromotion: (promotion: Omit<Promotion, 'id'>) => void;\n  \n  // Поставщики\n  suppliers: Supplier[];\n  addSupplier: (supplier: Omit<Supplier, 'id'>) => void;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\n// Начальные данные (пустые массивы для реальной работы)\nconst initialProducts: Product[] = [];\n\nconst initialLocations: Location[] = [\n  {\n    id: 'loc1',\n    name: 'Точка \"Центр\"',\n    address: 'ул. Ленина, 15',\n    managerId: 'admin1',\n    isActive: true,\n  },\n];\n\nconst initialInventory: Inventory[] = [];\n\nconst initialSuppliers: Supplier[] = [];\n\nconst initialPromotions: Promotion[] = [];\n\ninterface DataProviderProps {\n  children: ReactNode;\n}\n\n// Функции для работы с localStorage\nconst loadFromStorage = <T>(key: string, defaultValue: T): T => {\n  try {\n    const stored = localStorage.getItem(key);\n    return stored ? JSON.parse(stored) : defaultValue;\n  } catch {\n    return defaultValue;\n  }\n};\n\nconst saveToStorage = <T>(key: string, value: T): void => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    console.error('Error saving to localStorage:', error);\n  }\n};\n\nexport const DataProvider: React.FC<DataProviderProps> = ({ children }) => {\n  const [products, setProducts] = useState<Product[]>(() => \n    loadFromStorage('honeyProducts', initialProducts)\n  );\n  const [locations, setLocations] = useState<Location[]>(() => \n    loadFromStorage('honeyLocations', initialLocations)\n  );\n  const [inventory, setInventory] = useState<Inventory[]>(() => \n    loadFromStorage('honeyInventory', initialInventory)\n  );\n  const [sales, setSales] = useState<Sale[]>(() => \n    loadFromStorage('honeySales', [])\n  );\n  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>(() => \n    loadFromStorage('honeyPurchaseOrders', [])\n  );\n  const [promotions, setPromotions] = useState<Promotion[]>(() => \n    loadFromStorage('honeyPromotions', initialPromotions)\n  );\n  const [suppliers, setSuppliers] = useState<Supplier[]>(() => \n    loadFromStorage('honeySuppliers', initialSuppliers)\n  );\n\n  const addProduct = (product: Omit<Product, 'id'>) => {\n    const newProduct: Product = {\n      ...product,\n      id: `prod${Date.now()}`,\n    };\n    const updatedProducts = [...products, newProduct];\n    setProducts(updatedProducts);\n    saveToStorage('honeyProducts', updatedProducts);\n  };\n\n  const updateProduct = (id: string, product: Partial<Product>) => {\n    const updatedProducts = products.map(p => p.id === id ? { ...p, ...product } : p);\n    setProducts(updatedProducts);\n    saveToStorage('honeyProducts', updatedProducts);\n  };\n\n  const addLocation = (location: Omit<Location, 'id'>) => {\n    const newLocation: Location = {\n      ...location,\n      id: `loc${Date.now()}`,\n    };\n    const updatedLocations = [...locations, newLocation];\n    setLocations(updatedLocations);\n    saveToStorage('honeyLocations', updatedLocations);\n  };\n\n  const updateInventory = (locationId: string, productId: string, quantity: number) => {\n    const updatedInventory = inventory.map(inv => \n      inv.locationId === locationId && inv.productId === productId\n        ? { ...inv, currentStock: quantity, lastUpdated: new Date() }\n        : inv\n    );\n    setInventory(updatedInventory);\n    saveToStorage('honeyInventory', updatedInventory);\n  };\n\n  const getLowStockItems = () => {\n    return inventory.filter(inv => inv.currentStock <= inv.minStock);\n  };\n\n  const addSale = (sale: Omit<Sale, 'id'>) => {\n    const newSale: Sale = {\n      ...sale,\n      id: `sale${Date.now()}`,\n    };\n    const updatedSales = [...sales, newSale];\n    setSales(updatedSales);\n    saveToStorage('honeySales', updatedSales);\n    \n    // Обновляем остатки\n    sale.items.forEach(item => {\n      const currentInv = inventory.find(inv => \n        inv.locationId === sale.locationId && inv.productId === item.productId\n      );\n      if (currentInv) {\n        updateInventory(sale.locationId, item.productId, currentInv.currentStock - item.quantity);\n      }\n    });\n  };\n\n  const addPurchaseOrder = (order: Omit<PurchaseOrder, 'id'>) => {\n    const newOrder: PurchaseOrder = {\n      ...order,\n      id: `order${Date.now()}`,\n    };\n    const updatedOrders = [...purchaseOrders, newOrder];\n    setPurchaseOrders(updatedOrders);\n    saveToStorage('honeyPurchaseOrders', updatedOrders);\n  };\n\n  const updatePurchaseOrder = (id: string, order: Partial<PurchaseOrder>) => {\n    const updatedOrders = purchaseOrders.map(o => o.id === id ? { ...o, ...order } : o);\n    setPurchaseOrders(updatedOrders);\n    saveToStorage('honeyPurchaseOrders', updatedOrders);\n  };\n\n  const addPromotion = (promotion: Omit<Promotion, 'id'>) => {\n    const newPromotion: Promotion = {\n      ...promotion,\n      id: `promo${Date.now()}`,\n    };\n    const updatedPromotions = [...promotions, newPromotion];\n    setPromotions(updatedPromotions);\n    saveToStorage('honeyPromotions', updatedPromotions);\n  };\n\n  const addSupplier = (supplier: Omit<Supplier, 'id'>) => {\n    const newSupplier: Supplier = {\n      ...supplier,\n      id: `sup${Date.now()}`,\n    };\n    const updatedSuppliers = [...suppliers, newSupplier];\n    setSuppliers(updatedSuppliers);\n    saveToStorage('honeySuppliers', updatedSuppliers);\n  };\n\n  const value: DataContextType = {\n    products,\n    addProduct,\n    updateProduct,\n    locations,\n    addLocation,\n    inventory,\n    updateInventory,\n    getLowStockItems,\n    sales,\n    addSale,\n    purchaseOrders,\n    addPurchaseOrder,\n    updatePurchaseOrder,\n    promotions,\n    addPromotion,\n    suppliers,\n    addSupplier,\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = (): DataContextType => {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData должен использоваться внутри DataProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}