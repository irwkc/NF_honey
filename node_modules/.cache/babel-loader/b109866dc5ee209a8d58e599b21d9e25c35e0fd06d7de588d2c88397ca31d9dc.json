{"ast":null,"code":"var _jsxFileName = \"/Users/nikitaognev/Desktop/honey/src/context/DataContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataContext = /*#__PURE__*/createContext(undefined);\n\n// Моковые данные\nconst mockProducts = [{\n  id: 'prod1',\n  name: 'Мед липовый',\n  type: 'honey',\n  category: 'Цветочный мед',\n  description: 'Натуральный липовый мед высшего качества',\n  basePrice: 400,\n  unit: 'kg',\n  minWeight: 0.1,\n  maxWeight: 5,\n  isActive: true\n}, {\n  id: 'prod2',\n  name: 'Мед гречишный',\n  type: 'honey',\n  category: 'Цветочный мед',\n  description: 'Темный гречишный мед с насыщенным вкусом',\n  basePrice: 500,\n  unit: 'kg',\n  minWeight: 0.1,\n  maxWeight: 5,\n  isActive: true\n}, {\n  id: 'prod3',\n  name: 'Варенье клубничное',\n  type: 'jam',\n  category: 'Ягодное варенье',\n  description: 'Домашнее клубничное варенье',\n  basePrice: 150,\n  unit: 'l',\n  minWeight: 0.1,\n  maxWeight: 2,\n  isActive: true\n}, {\n  id: 'prod4',\n  name: 'Варенье малиновое',\n  type: 'jam',\n  category: 'Ягодное варенье',\n  description: 'Ароматное малиновое варенье',\n  basePrice: 180,\n  unit: 'l',\n  minWeight: 0.1,\n  maxWeight: 2,\n  isActive: true\n}];\nconst mockLocations = [{\n  id: 'loc1',\n  name: 'Точка \"Центр\"',\n  address: 'ул. Ленина, 15',\n  managerId: 'admin1',\n  isActive: true\n}, {\n  id: 'loc2',\n  name: 'Точка \"Парк\"',\n  address: 'Центральный парк, павильон 3',\n  managerId: 'admin1',\n  isActive: true\n}];\nconst mockInventory = [{\n  id: 'inv1',\n  locationId: 'loc1',\n  productId: 'prod1',\n  currentStock: 2.3,\n  minStock: 5,\n  maxStock: 50,\n  lastUpdated: new Date(),\n  lastRestock: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n}, {\n  id: 'inv2',\n  locationId: 'loc1',\n  productId: 'prod2',\n  currentStock: 8.5,\n  minStock: 5,\n  maxStock: 50,\n  lastUpdated: new Date(),\n  lastRestock: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)\n}, {\n  id: 'inv3',\n  locationId: 'loc1',\n  productId: 'prod3',\n  currentStock: 1.8,\n  minStock: 3,\n  maxStock: 20,\n  lastUpdated: new Date(),\n  lastRestock: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000)\n}, {\n  id: 'inv4',\n  locationId: 'loc1',\n  productId: 'prod4',\n  currentStock: 4.2,\n  minStock: 3,\n  maxStock: 20,\n  lastUpdated: new Date(),\n  lastRestock: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)\n}];\nconst mockSuppliers = [{\n  id: 'sup1',\n  name: 'ООО Медовый Дом',\n  contactPerson: 'Иван Петров',\n  phone: '+7 999 123 45 67',\n  email: 'supplier@newformat.ru',\n  products: [{\n    productId: 'prod1',\n    purchasePrice: 300,\n    minOrderQuantity: 10,\n    deliveryDays: 3\n  }, {\n    productId: 'prod2',\n    purchasePrice: 350,\n    minOrderQuantity: 10,\n    deliveryDays: 3\n  }],\n  isActive: true\n}, {\n  id: 'sup2',\n  name: 'ИП Сидорова',\n  contactPerson: 'Анна Сидорова',\n  phone: '+7 999 765 43 21',\n  email: 'jam@newformat.ru',\n  products: [{\n    productId: 'prod3',\n    purchasePrice: 100,\n    minOrderQuantity: 5,\n    deliveryDays: 2\n  }, {\n    productId: 'prod4',\n    purchasePrice: 120,\n    minOrderQuantity: 5,\n    deliveryDays: 2\n  }],\n  isActive: true\n}];\nconst mockPromotions = [{\n  id: 'promo1',\n  name: 'При покупке 2 кг меда - подарок 0.5 кг',\n  description: 'При покупке любого меда от 2 кг получаете в подарок 0.5 кг липового меда',\n  type: 'buy_x_get_y',\n  conditions: [{\n    productId: 'prod1',\n    minQuantity: 2\n  }, {\n    productId: 'prod2',\n    minQuantity: 2\n  }],\n  gifts: [{\n    productId: 'prod1',\n    quantity: 0.5\n  }],\n  isActive: true,\n  startDate: new Date(),\n  locations: ['loc1', 'loc2']\n}];\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  const [products, setProducts] = useState(mockProducts);\n  const [locations, setLocations] = useState(mockLocations);\n  const [inventory, setInventory] = useState(mockInventory);\n  const [sales, setSales] = useState([]);\n  const [purchaseOrders, setPurchaseOrders] = useState([]);\n  const [promotions, setPromotions] = useState(mockPromotions);\n  const [suppliers, setSuppliers] = useState(mockSuppliers);\n  const addProduct = product => {\n    const newProduct = {\n      ...product,\n      id: `prod${Date.now()}`\n    };\n    setProducts(prev => [...prev, newProduct]);\n  };\n  const updateProduct = (id, product) => {\n    setProducts(prev => prev.map(p => p.id === id ? {\n      ...p,\n      ...product\n    } : p));\n  };\n  const addLocation = location => {\n    const newLocation = {\n      ...location,\n      id: `loc${Date.now()}`\n    };\n    setLocations(prev => [...prev, newLocation]);\n  };\n  const updateInventory = (locationId, productId, quantity) => {\n    setInventory(prev => prev.map(inv => inv.locationId === locationId && inv.productId === productId ? {\n      ...inv,\n      currentStock: quantity,\n      lastUpdated: new Date()\n    } : inv));\n  };\n  const getLowStockItems = () => {\n    return inventory.filter(inv => inv.currentStock <= inv.minStock);\n  };\n  const addSale = sale => {\n    const newSale = {\n      ...sale,\n      id: `sale${Date.now()}`\n    };\n    setSales(prev => [...prev, newSale]);\n\n    // Обновляем остатки\n    sale.items.forEach(item => {\n      const currentInv = inventory.find(inv => inv.locationId === sale.locationId && inv.productId === item.productId);\n      if (currentInv) {\n        updateInventory(sale.locationId, item.productId, currentInv.currentStock - item.quantity);\n      }\n    });\n  };\n  const addPurchaseOrder = order => {\n    const newOrder = {\n      ...order,\n      id: `order${Date.now()}`\n    };\n    setPurchaseOrders(prev => [...prev, newOrder]);\n  };\n  const updatePurchaseOrder = (id, order) => {\n    setPurchaseOrders(prev => prev.map(o => o.id === id ? {\n      ...o,\n      ...order\n    } : o));\n  };\n  const addPromotion = promotion => {\n    const newPromotion = {\n      ...promotion,\n      id: `promo${Date.now()}`\n    };\n    setPromotions(prev => [...prev, newPromotion]);\n  };\n  const addSupplier = supplier => {\n    const newSupplier = {\n      ...supplier,\n      id: `sup${Date.now()}`\n    };\n    setSuppliers(prev => [...prev, newSupplier]);\n  };\n  const value = {\n    products,\n    addProduct,\n    updateProduct,\n    locations,\n    addLocation,\n    inventory,\n    updateInventory,\n    getLowStockItems,\n    sales,\n    addSale,\n    purchaseOrders,\n    addPurchaseOrder,\n    updatePurchaseOrder,\n    promotions,\n    addPromotion,\n    suppliers,\n    addSupplier\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"DKQssChXY8Xq80m0GQR3zVLD7Mc=\");\n_c = DataProvider;\nexport const useData = () => {\n  _s2();\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData должен использоваться внутри DataProvider');\n  }\n  return context;\n};\n_s2(useData, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","DataContext","undefined","mockProducts","id","name","type","category","description","basePrice","unit","minWeight","maxWeight","isActive","mockLocations","address","managerId","mockInventory","locationId","productId","currentStock","minStock","maxStock","lastUpdated","Date","lastRestock","now","mockSuppliers","contactPerson","phone","email","products","purchasePrice","minOrderQuantity","deliveryDays","mockPromotions","conditions","minQuantity","gifts","quantity","startDate","locations","DataProvider","children","_s","setProducts","setLocations","inventory","setInventory","sales","setSales","purchaseOrders","setPurchaseOrders","promotions","setPromotions","suppliers","setSuppliers","addProduct","product","newProduct","prev","updateProduct","map","p","addLocation","location","newLocation","updateInventory","inv","getLowStockItems","filter","addSale","sale","newSale","items","forEach","item","currentInv","find","addPurchaseOrder","order","newOrder","updatePurchaseOrder","o","addPromotion","promotion","newPromotion","addSupplier","supplier","newSupplier","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useData","_s2","context","Error","$RefreshReg$"],"sources":["/Users/nikitaognev/Desktop/honey/src/context/DataContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport { Product, Location, Inventory, Sale, PurchaseOrder, Promotion, Supplier } from '../types';\n\ninterface DataContextType {\n  // Товары\n  products: Product[];\n  addProduct: (product: Omit<Product, 'id'>) => void;\n  updateProduct: (id: string, product: Partial<Product>) => void;\n  \n  // Локации\n  locations: Location[];\n  addLocation: (location: Omit<Location, 'id'>) => void;\n  \n  // Остатки\n  inventory: Inventory[];\n  updateInventory: (locationId: string, productId: string, quantity: number) => void;\n  getLowStockItems: () => Inventory[];\n  \n  // Продажи\n  sales: Sale[];\n  addSale: (sale: Omit<Sale, 'id'>) => void;\n  \n  // Заказы поставщикам\n  purchaseOrders: PurchaseOrder[];\n  addPurchaseOrder: (order: Omit<PurchaseOrder, 'id'>) => void;\n  updatePurchaseOrder: (id: string, order: Partial<PurchaseOrder>) => void;\n  \n  // Акции\n  promotions: Promotion[];\n  addPromotion: (promotion: Omit<Promotion, 'id'>) => void;\n  \n  // Поставщики\n  suppliers: Supplier[];\n  addSupplier: (supplier: Omit<Supplier, 'id'>) => void;\n}\n\nconst DataContext = createContext<DataContextType | undefined>(undefined);\n\n// Моковые данные\nconst mockProducts: Product[] = [\n  {\n    id: 'prod1',\n    name: 'Мед липовый',\n    type: 'honey',\n    category: 'Цветочный мед',\n    description: 'Натуральный липовый мед высшего качества',\n    basePrice: 400,\n    unit: 'kg',\n    minWeight: 0.1,\n    maxWeight: 5,\n    isActive: true,\n  },\n  {\n    id: 'prod2',\n    name: 'Мед гречишный',\n    type: 'honey',\n    category: 'Цветочный мед',\n    description: 'Темный гречишный мед с насыщенным вкусом',\n    basePrice: 500,\n    unit: 'kg',\n    minWeight: 0.1,\n    maxWeight: 5,\n    isActive: true,\n  },\n  {\n    id: 'prod3',\n    name: 'Варенье клубничное',\n    type: 'jam',\n    category: 'Ягодное варенье',\n    description: 'Домашнее клубничное варенье',\n    basePrice: 150,\n    unit: 'l',\n    minWeight: 0.1,\n    maxWeight: 2,\n    isActive: true,\n  },\n  {\n    id: 'prod4',\n    name: 'Варенье малиновое',\n    type: 'jam',\n    category: 'Ягодное варенье',\n    description: 'Ароматное малиновое варенье',\n    basePrice: 180,\n    unit: 'l',\n    minWeight: 0.1,\n    maxWeight: 2,\n    isActive: true,\n  },\n];\n\nconst mockLocations: Location[] = [\n  {\n    id: 'loc1',\n    name: 'Точка \"Центр\"',\n    address: 'ул. Ленина, 15',\n    managerId: 'admin1',\n    isActive: true,\n  },\n  {\n    id: 'loc2',\n    name: 'Точка \"Парк\"',\n    address: 'Центральный парк, павильон 3',\n    managerId: 'admin1',\n    isActive: true,\n  },\n];\n\nconst mockInventory: Inventory[] = [\n  {\n    id: 'inv1',\n    locationId: 'loc1',\n    productId: 'prod1',\n    currentStock: 2.3,\n    minStock: 5,\n    maxStock: 50,\n    lastUpdated: new Date(),\n    lastRestock: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\n  },\n  {\n    id: 'inv2',\n    locationId: 'loc1',\n    productId: 'prod2',\n    currentStock: 8.5,\n    minStock: 5,\n    maxStock: 50,\n    lastUpdated: new Date(),\n    lastRestock: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),\n  },\n  {\n    id: 'inv3',\n    locationId: 'loc1',\n    productId: 'prod3',\n    currentStock: 1.8,\n    minStock: 3,\n    maxStock: 20,\n    lastUpdated: new Date(),\n    lastRestock: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\n  },\n  {\n    id: 'inv4',\n    locationId: 'loc1',\n    productId: 'prod4',\n    currentStock: 4.2,\n    minStock: 3,\n    maxStock: 20,\n    lastUpdated: new Date(),\n    lastRestock: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000),\n  },\n];\n\nconst mockSuppliers: Supplier[] = [\n  {\n    id: 'sup1',\n    name: 'ООО Медовый Дом',\n    contactPerson: 'Иван Петров',\n    phone: '+7 999 123 45 67',\n    email: 'supplier@newformat.ru',\n    products: [\n      {\n        productId: 'prod1',\n        purchasePrice: 300,\n        minOrderQuantity: 10,\n        deliveryDays: 3,\n      },\n      {\n        productId: 'prod2',\n        purchasePrice: 350,\n        minOrderQuantity: 10,\n        deliveryDays: 3,\n      },\n    ],\n    isActive: true,\n  },\n  {\n    id: 'sup2',\n    name: 'ИП Сидорова',\n    contactPerson: 'Анна Сидорова',\n    phone: '+7 999 765 43 21',\n    email: 'jam@newformat.ru',\n    products: [\n      {\n        productId: 'prod3',\n        purchasePrice: 100,\n        minOrderQuantity: 5,\n        deliveryDays: 2,\n      },\n      {\n        productId: 'prod4',\n        purchasePrice: 120,\n        minOrderQuantity: 5,\n        deliveryDays: 2,\n      },\n    ],\n    isActive: true,\n  },\n];\n\nconst mockPromotions: Promotion[] = [\n  {\n    id: 'promo1',\n    name: 'При покупке 2 кг меда - подарок 0.5 кг',\n    description: 'При покупке любого меда от 2 кг получаете в подарок 0.5 кг липового меда',\n    type: 'buy_x_get_y',\n    conditions: [\n      {\n        productId: 'prod1',\n        minQuantity: 2,\n      },\n      {\n        productId: 'prod2',\n        minQuantity: 2,\n      },\n    ],\n    gifts: [\n      {\n        productId: 'prod1',\n        quantity: 0.5,\n      },\n    ],\n    isActive: true,\n    startDate: new Date(),\n    locations: ['loc1', 'loc2'],\n  },\n];\n\ninterface DataProviderProps {\n  children: ReactNode;\n}\n\nexport const DataProvider: React.FC<DataProviderProps> = ({ children }) => {\n  const [products, setProducts] = useState<Product[]>(mockProducts);\n  const [locations, setLocations] = useState<Location[]>(mockLocations);\n  const [inventory, setInventory] = useState<Inventory[]>(mockInventory);\n  const [sales, setSales] = useState<Sale[]>([]);\n  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrder[]>([]);\n  const [promotions, setPromotions] = useState<Promotion[]>(mockPromotions);\n  const [suppliers, setSuppliers] = useState<Supplier[]>(mockSuppliers);\n\n  const addProduct = (product: Omit<Product, 'id'>) => {\n    const newProduct: Product = {\n      ...product,\n      id: `prod${Date.now()}`,\n    };\n    setProducts(prev => [...prev, newProduct]);\n  };\n\n  const updateProduct = (id: string, product: Partial<Product>) => {\n    setProducts(prev => prev.map(p => p.id === id ? { ...p, ...product } : p));\n  };\n\n  const addLocation = (location: Omit<Location, 'id'>) => {\n    const newLocation: Location = {\n      ...location,\n      id: `loc${Date.now()}`,\n    };\n    setLocations(prev => [...prev, newLocation]);\n  };\n\n  const updateInventory = (locationId: string, productId: string, quantity: number) => {\n    setInventory(prev => prev.map(inv => \n      inv.locationId === locationId && inv.productId === productId\n        ? { ...inv, currentStock: quantity, lastUpdated: new Date() }\n        : inv\n    ));\n  };\n\n  const getLowStockItems = () => {\n    return inventory.filter(inv => inv.currentStock <= inv.minStock);\n  };\n\n  const addSale = (sale: Omit<Sale, 'id'>) => {\n    const newSale: Sale = {\n      ...sale,\n      id: `sale${Date.now()}`,\n    };\n    setSales(prev => [...prev, newSale]);\n    \n    // Обновляем остатки\n    sale.items.forEach(item => {\n      const currentInv = inventory.find(inv => \n        inv.locationId === sale.locationId && inv.productId === item.productId\n      );\n      if (currentInv) {\n        updateInventory(sale.locationId, item.productId, currentInv.currentStock - item.quantity);\n      }\n    });\n  };\n\n  const addPurchaseOrder = (order: Omit<PurchaseOrder, 'id'>) => {\n    const newOrder: PurchaseOrder = {\n      ...order,\n      id: `order${Date.now()}`,\n    };\n    setPurchaseOrders(prev => [...prev, newOrder]);\n  };\n\n  const updatePurchaseOrder = (id: string, order: Partial<PurchaseOrder>) => {\n    setPurchaseOrders(prev => prev.map(o => o.id === id ? { ...o, ...order } : o));\n  };\n\n  const addPromotion = (promotion: Omit<Promotion, 'id'>) => {\n    const newPromotion: Promotion = {\n      ...promotion,\n      id: `promo${Date.now()}`,\n    };\n    setPromotions(prev => [...prev, newPromotion]);\n  };\n\n  const addSupplier = (supplier: Omit<Supplier, 'id'>) => {\n    const newSupplier: Supplier = {\n      ...supplier,\n      id: `sup${Date.now()}`,\n    };\n    setSuppliers(prev => [...prev, newSupplier]);\n  };\n\n  const value: DataContextType = {\n    products,\n    addProduct,\n    updateProduct,\n    locations,\n    addLocation,\n    inventory,\n    updateInventory,\n    getLowStockItems,\n    sales,\n    addSale,\n    purchaseOrders,\n    addPurchaseOrder,\n    updatePurchaseOrder,\n    promotions,\n    addPromotion,\n    suppliers,\n    addSupplier,\n  };\n\n  return (\n    <DataContext.Provider value={value}>\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport const useData = (): DataContextType => {\n  const context = useContext(DataContext);\n  if (context === undefined) {\n    throw new Error('useData должен использоваться внутри DataProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}